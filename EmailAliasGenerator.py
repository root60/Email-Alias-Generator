import base64
import sys

ENCRYPTED_CODE = """
aW1wb3J0IHJhbmRvbQ0KaW1wb3J0IHN0cmluZw0KaW1wb3J0IG9zDQpmcm9tIGNvbG9yYW1hIGltcG9ydCBpbml0LCBGb3JlLCBTdHlsZQ0KDQojIEluaXRpYWxpemUgY29sb3JhbWEgZm9yIGNvbG9yZWQgb3V0cHV0DQppbml0KCkNCg0KIyBDbGVhciB0ZXJtaW5hbCBmdW5jdGlvbg0KZGVmIGNsZWFyX3NjcmVlbigpOg0KICAgIG9zLnN5c3RlbSgnY2xzJyBpZiBvcy5uYW1lID09ICdudCcgZWxzZSAnY2xlYXInKQ0KDQojIEFkdmFuY2VkIEFTQ0lJIGJhbm5lcg0KQkFOTkVSID0gZiIiIg0Ke0ZvcmUuQ1lBTn3ilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJANCuKUgiAgICAgICAgICAgIEVtYWlsIEFsaWFzIEdlbmVyYXRvciAgICAgICAgICAg4pSCDQrilIIgICAgICAgICAgICAgIEF1dGhvcjogUmVkSHlkcmEgICAgICAgICAgICAgIOKUgg0K4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYe1N0eWxlLlJFU0VUX0FMTH0NCiIiIg0KDQojIEluc3RydWN0aW9ucyBpbiBhIHN0eWxlZCBib3gNCklOU1RSVUNUSU9OU19CT1ggPSBmIiIiDQp7Rm9yZS5ZRUxMT1d94pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIEluc3RydWN0aW9ucyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJB7U3R5bGUuUkVTRVRfQUxMfQ0Ke0ZvcmUuWUVMTE9XfeKUgiAtIEVudGVyIHlvdXIgZW1haWwgKGUuZy4sIHVzZXJAZ21haWwuY29tKSAgICDilIJ7U3R5bGUuUkVTRVRfQUxMfQ0Ke0ZvcmUuWUVMTE9XfeKUgiAtIFNwZWNpZnkgaG93IG1hbnkgYWxpYXNlcyB5b3UgbmVlZCAgICAgICAgICDilIJ7U3R5bGUuUkVTRVRfQUxMfQ0Ke0ZvcmUuWUVMTE9XfeKUgiAtIEdldCB1bmlxdWUgYWxpYXNlcyBpbnN0YW50bHkhICAgICAgICAgICAgICDilIJ7U3R5bGUuUkVTRVRfQUxMfQ0Ke0ZvcmUuWUVMTE9XfeKUgiB7Rm9yZS5NQUdFTlRBfU5vdGU6e1N0eWxlLlJFU0VUX0FMTH0gQWxsIGFsaWFzZXMgZGVsaXZlciB0byB5b3VyIGluYm94ICAgICAg4pSCe1N0eWxlLlJFU0VUX0FMTH0NCntGb3JlLllFTExPV33ilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJh7U3R5bGUuUkVTRVRfQUxMfQ0KIiIiDQoNCiMgRnVuY3Rpb24gdG8gZ2VuZXJhdGUgcmFuZG9tIHN0cmluZw0KZGVmIHJhbmRvbV9zdHJpbmcobGVuZ3RoPTUpOg0KICAgIHJldHVybiAnJy5qb2luKHJhbmRvbS5jaG9pY2VzKHN0cmluZy5hc2NpaV9sb3dlcmNhc2UgKyBzdHJpbmcuZGlnaXRzLCBrPWxlbmd0aCkpDQoNCiMgRnVuY3Rpb24gdG8gZ2VuZXJhdGUgZW1haWwgYWxpYXNlcw0KZGVmIGdlbmVyYXRlX2VtYWlsX2FsaWFzZXMoYmFzZV9sb2NhbCwgZG9tYWluLCBjb3VudD0xMCk6DQogICAgYWxpYXNlcyA9IFtdDQogICAgZm9yIF8gaW4gcmFuZ2UoY291bnQpOg0KICAgICAgICBzdHlsZSA9IHJhbmRvbS5jaG9pY2UoWydwbHVzJywgJ2RvdHMnLCAncmFuZG9tJ10pDQogICAgICAgIGlmIHN0eWxlID09ICdwbHVzJzoNCiAgICAgICAgICAgIHRhZyA9IHJhbmRvbV9zdHJpbmcoKQ0KICAgICAgICAgICAgYWxpYXMgPSBmIntiYXNlX2xvY2FsfSt7dGFnfUB7ZG9tYWlufSINCiAgICAgICAgZWxpZiBzdHlsZSA9PSAnZG90cyc6DQogICAgICAgICAgICBkb3R0ZWQgPSAnJy5qb2luKGMgKyAnLicgaWYgcmFuZG9tLnJhbmRvbSgpID4gMC41IGVsc2UgYyBmb3IgYyBpbiBiYXNlX2xvY2FsKQ0KICAgICAgICAgICAgYWxpYXMgPSBmIntkb3R0ZWR9QHtkb21haW59Ig0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgc3VmZml4ID0gcmFuZG9tX3N0cmluZygpDQogICAgICAgICAgICBhbGlhcyA9IGYie2Jhc2VfbG9jYWx9e3N1ZmZpeH1Ae2RvbWFpbn0iDQogICAgICAgIGFsaWFzZXMuYXBwZW5kKGFsaWFzKQ0KICAgIHJldHVybiBhbGlhc2VzDQoNCiMgRnVuY3Rpb24gdG8gc2F2ZSBhbGlhc2VzIHRvIGEgZmlsZQ0KZGVmIHNhdmVfYWxpYXNlcyhhbGlhc2VzLCBmaWxlbmFtZT0iZW1haWxfYWxpYXNlcy50eHQiKToNCiAgICB0cnk6DQogICAgICAgIHdpdGggb3BlbihmaWxlbmFtZSwgInciKSBhcyBmaWxlOg0KICAgICAgICAgICAgZm9yIGFsaWFzIGluIGFsaWFzZXM6DQogICAgICAgICAgICAgICAgZmlsZS53cml0ZShhbGlhcyArICJcbiIpDQogICAgICAgIHByaW50KGYie0ZvcmUuR1JFRU59IEFsaWFzZXMgc2F2ZWQgdG8ge2ZpbGVuYW1lfXtTdHlsZS5SRVNFVF9BTEx9IikNCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgIHByaW50KGYie0ZvcmUuUkVEfSBFcnJvciBzYXZpbmcgYWxpYXNlczoge2V9e1N0eWxlLlJFU0VUX0FMTH0iKQ0KDQojIE1haW4gcHJvZ3JhbSBmbG93DQpkZWYgbWFpbigpOg0KICAgIGNsZWFyX3NjcmVlbigpDQogICAgcHJpbnQoQkFOTkVSKSAgIyBQcmludCBiYW5uZXIgaW5zdGFudGx5DQogICAgcHJpbnQoSU5TVFJVQ1RJT05TX0JPWCkgICMgUHJpbnQgaW5zdHJ1Y3Rpb25zIGluc3RhbnRseQ0KICAgIA0KICAgICMgU3RlcCAxOiBHZXQgYmFzZSBlbWFpbA0KICAgIHdoaWxlIFRydWU6DQogICAgICAgIGJhc2VfZW1haWwgPSBpbnB1dChmIntGb3JlLllFTExPV30gRW50ZXIgeW91ciBlbWFpbCAoZS5nLiwgZXhhbXBsZUBnbWFpbC5jb20pOiB7U3R5bGUuUkVTRVRfQUxMfSIpLnN0cmlwKCkNCiAgICAgICAgaWYgIkAiIGluIGJhc2VfZW1haWwgYW5kICIuIiBpbiBiYXNlX2VtYWlsLnNwbGl0KCJAIilbMV06ICAjIEJhc2ljIGVtYWlsIHZhbGlkYXRpb24NCiAgICAgICAgICAgIHByaW50KGYie0ZvcmUuR1JFRU59IEVtYWlsIHNldDoge2Jhc2VfZW1haWx9e1N0eWxlLlJFU0VUX0FMTH0iKQ0KICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHByaW50KGYie0ZvcmUuUkVEfSBJbnZhbGlkIGVtYWlsIGZvcm1hdC4gUGxlYXNlIHRyeSBhZ2Fpbi57U3R5bGUuUkVTRVRfQUxMfSIpDQogICAgDQogICAgIyBTdGVwIDI6IEdldCBhbGlhcyBjb3VudA0KICAgIHdoaWxlIFRydWU6DQogICAgICAgIHRyeToNCiAgICAgICAgICAgIG51bV9hbGlhc2VzID0gaW50KGlucHV0KGYie0ZvcmUuWUVMTE9XfSBIb3cgbWFueSBhbGlhc2VzIGRvIHlvdSBuZWVkPyAoRW50ZXIgYSBwb3NpdGl2ZSBudW1iZXIpOiB7U3R5bGUuUkVTRVRfQUxMfSIpKQ0KICAgICAgICAgICAgaWYgbnVtX2FsaWFzZXMgPiAwOg0KICAgICAgICAgICAgICAgIHByaW50KGYie0ZvcmUuR1JFRU59IEFsaWFzIGNvdW50IHNldDoge251bV9hbGlhc2VzfXtTdHlsZS5SRVNFVF9BTEx9IikNCiAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBwcmludChmIntGb3JlLlJFRH0gUGxlYXNlIGVudGVyIGEgcG9zaXRpdmUgbnVtYmVyLntTdHlsZS5SRVNFVF9BTEx9IikNCiAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6DQogICAgICAgICAgICBwcmludChmIntGb3JlLlJFRH0gSW52YWxpZCBpbnB1dC4gUGxlYXNlIGVudGVyIGEgbnVtYmVyLntTdHlsZS5SRVNFVF9BTEx9IikNCiAgICANCiAgICAjIFN0ZXAgMzogR2VuZXJhdGUgYWxpYXNlcw0KICAgIGxvY2FsX3BhcnQsIGRvbWFpbiA9IGJhc2VfZW1haWwuc3BsaXQoJ0AnKQ0KICAgIHByaW50KGYiXG57Rm9yZS5DWUFOfSBHZW5lcmF0aW5nIHtudW1fYWxpYXNlc30gYWxpYXNlcy4uLntTdHlsZS5SRVNFVF9BTEx9IikNCiAgICBlbWFpbF9hbGlhc2VzID0gZ2VuZXJhdGVfZW1haWxfYWxpYXNlcyhsb2NhbF9wYXJ0LCBkb21haW4sIG51bV9hbGlhc2VzKQ0KICAgIA0KICAgICMgRGlzcGxheSBhbGlhc2VzDQogICAgcHJpbnQoZiJcbntGb3JlLkdSRUVOfSBHZW5lcmF0ZWQgRW1haWwgQWxpYXNlczp7U3R5bGUuUkVTRVRfQUxMfSIpDQogICAgZm9yIGksIGFsaWFzIGluIGVudW1lcmF0ZShlbWFpbF9hbGlhc2VzLCAxKToNCiAgICAgICAgY29sb3IgPSByYW5kb20uY2hvaWNlKFtGb3JlLkJMVUUsIEZvcmUuTUFHRU5UQSwgRm9yZS5DWUFOLCBGb3JlLkdSRUVOXSkNCiAgICAgICAgcHJpbnQoZiJ7Y29sb3J9e2l9LiB7YWxpYXN9e1N0eWxlLlJFU0VUX0FMTH0iKQ0KICAgIA0KICAgICMgU3RlcCA0OiBTYXZlIGFsaWFzZXMgdG8gYSBmaWxlDQogICAgc2F2ZV9vcHRpb24gPSBpbnB1dChmIntGb3JlLllFTExPV30gRG8geW91IHdhbnQgdG8gc2F2ZSB0aGVzZSBhbGlhc2VzIHRvIGEgZmlsZT8gKHkvbik6IHtTdHlsZS5SRVNFVF9BTEx9Iikuc3RyaXAoKS5sb3dlcigpDQogICAgaWYgc2F2ZV9vcHRpb24gPT0gInkiOg0KICAgICAgICBzYXZlX2FsaWFzZXMoZW1haWxfYWxpYXNlcykNCiAgICANCiAgICBwcmludChmIlxue0ZvcmUuQ1lBTn0gPT09IERvbmUhIFRoYW5rIHlvdSBmb3IgdXNpbmcgdGhlIEVtYWlsIEFsaWFzIEdlbmVyYXRvciEgPT09e1N0eWxlLlJFU0VUX0FMTH0iKQ0KDQojIFJ1biB0aGUgcHJvZ3JhbQ0KaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoNCiAgICBtYWluKCk==="""

def main():
    try:
        decoded_code = base64.b64decode(ENCRYPTED_CODE).decode('utf-8')
        exec(decoded_code, {"__name__": "__main__", "__builtins__": __builtins__})
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()